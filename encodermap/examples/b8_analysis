import encodermap as em
import os
import numpy as np
import matplotlib.pyplot as plt
import MDAnalysis as md
import time
import sys


molname = "it_tremd"
run_id = 3
step = 50000
selection_for_alignment = "resid 0:195"

main_path = "runs/{}/run{}".format(molname, run_id)


# ######################### Load data #########################

#structure_path = "data/{}/01.pdb".format(molname)
#trajectory_paths = ["data/{}/{:02d}.xtc".format(molname, i+1) for i in range(12)]

structure_path = "it_tremd.pdb"
trajectory_paths = ["wt_tremd.xtc"]

uni = md.Universe(structure_path, trajectory_paths)
selected_atoms = uni.select_atoms("backbone or name H or name O1 or (name CD and resname PRO)")
moldata = em.MolData(selected_atoms)#, cache_path="data/{}/cache".format(molname))


# ######################### Load parameters and checkpoint #########################

parameters = em.ADCParameters.load(os.path.join(main_path, "parameters.json"))

start_time = time.time()

print('start calculating structures')

e_map = em.AngleDihedralCartesianEncoderMap(parameters, moldata,
                                            checkpoint_path=os.path.join(main_path, "checkpoints",
                                                                      "step{}.ckpt".format(step)), read_only=True)
print('end calculating structures')

print("--- %s seconds ---" % (time.time() - start_time))

# ######################### Project Data to map #########################
print("starting encoding")

start_time = time.time()

projected = e_map.encode(moldata.dihedrals)

print("end encoding")

print("--- %s seconds ---" % (time.time() - start_time))

file = open("projected.txt", 'w')
for row in projected:
    np.savetxt(file, row)
file.close()

# ######################### Plot histogram with path generator and lasso Select #########################

hist, xedges, yedges = np.histogram2d(projected[:, 0], projected[:, 1], bins=100)

file = open("hist.txt", 'w')
for row in hist:
    np.savetxt(file, row)
file.close()

#GENERATOR
#Now there is the simple histogram plotting, it can be coloured freely (e.g. representing the potential energy of every structure)
fig1, axe1 = plt.subplots()

caxe = axe1.imshow(-np.log(hist.T), origin='low', extent=[xedges[0], xedges[-1], yedges[0], yedges[-1]], aspect="auto")
cbar = fig1.colorbar(caxe)
cbar.set_label("-ln(p)", labelpad=0)
axe1.set_title("Path Generator")

#Interactive part

generator = em.plot.PathGenerateCartesians(axe1, e_map, moldata, #vmd_path="/usr/local/lib/vmd/vmd_LINUXAMD64",
                                           align_reference=moldata.sorted_atoms, align_select=selection_for_alignment)

#SELECTOR
fig2, axe2 = plt.subplots()
caxe = axe2.imshow(-np.log(hist.T), origin='low', extent=[xedges[0], xedges[-1], yedges[0], yedges[-1]], aspect="auto")
cbar = fig2.colorbar(caxe)
cbar.set_label("-ln(p)", labelpad=0)
axe2.set_title("Selector")

#Interactive part
selector = em.plot.PathSelect(axe2, projected, moldata, e_map.p.main_path, vmd_path="/usr/local/lib/vmd/vmd_LINUXAMD64",
                              align_reference=moldata.sorted_atoms, align_select=selection_for_alignment)

plt.show()
