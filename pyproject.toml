################################################################################
# Vulture
################################################################################
[tool.vulture]
paths = ['mdb', '.vulture_whitelist.txt']
exclude = ["tests/", "development/"]
ignore_decorators = ["@app.route", "@require_*"]
ignore_names = ["visit_*", "do_*", "__exit__"]
make_whitelist = false
min_confidence = 80
sort_by_size = true
verbose = false


################################################################################
# Versioneer
################################################################################
[tool.versioneer]
VCS = "git"
style = "pep440"
versionfile_source = "encodermap/_version.py"
versionfile_build = "encodermap/_version.py"
tag_prefix = ""


################################################################################
# Flake8
################################################################################
[tool.flake8]
paths = ['encodermap']
excluded_files = []
excluded_lines = []
excluded_errors = []
exclude = ["development", "tests", "encodermap/__version__.py", "versioneer.py"]
max-line-length = 100
verbose = 0


################################################################################
# Coverage
################################################################################
[tool.coverage.run]
branch = true
command_line = "-m unittest discover -s tests"

[tool.coverage.html]
directory = "docs/build/htmlcov"
title = "coverage_report"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "__all__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:"
]
show_missing = true
omit = [
    "*Test*",
    "*test*",
    "*/usr/local/lib*",
    "*Users*",
    "*__init__*",
    "*__autograph_generated*",
    "*development*",
    "versioneer.py",
    "*examples*",
    "*deprecated*",
    "*encodermap_tf1*",
    "docs/*"
]


################################################################################
# Black
################################################################################
[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | development
  )/
  | foo.py           # also separately exclude a file named foo.py in
                     # the root of the project
)
'''


################################################################################
# MyPy
################################################################################
[tool.mypy]
exclude = [
    "development",
    "encodermap/models/models_dep",
    "encodermap/encodermap_tf1",
    "encodermap/examples*",
    "versioneer.py",
    "encodermap/__version__.py",
    "tests",
    "encodermap/plot/utils.py",
    "encodermap/misc/clustering.py",
]
namespace_packages = true
follow_imports = "silent"
ignore_missing_imports = true
packages = [
    "encodermap"
]
# enable-incomplete-features = true
# plugins = "numpy.typing.mypy_plugin"
show_error_codes = true
warn_return_any = true
warn_unused_configs = true
implicit_reexport = true
pretty = true
disable_error_code = ['attr-defined', 'import']



################################################################################
# Isort
################################################################################
[tool.isort]
skip = ["tests/long_training.py"]
profile = "black"
src_paths = ["encodermap", "tests"]
lines_after_imports = 2
sections = ["FUTURE", "ENCODERMAP", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
known_encodermap = ["enocodermap"]
import_heading_future = "Future Imports at the top"
import_heading_stdlib = "Standard Library Imports"
import_heading_thirdparty = "Third Party Imports"
import_heading_firstparty = "Encodermap imports"
import_heading_localfolder = "Local Folder Imports"
