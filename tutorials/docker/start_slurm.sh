#!/bin/bash

# This is a rather minimal example Argbash potential
# Example taken from http://argbash.readthedocs.io/en/stable/example.html
#
# ARG_OPTIONAL_BOOLEAN([push],[],[Push the containers])
# ARG_OPTIONAL_BOOLEAN([pull],[],[Pull upstream images. Might be time-consuming to rebuild everything.])
# ARG_OPTIONAL_BOOLEAN([d],[],[Start compose in detached mode])
# ARG_OPTIONAL_BOOLEAN([rm],[],[Remove directories with certs, keys and temporary directories.])
# ARG_HELP([Use --push to also push the docker images.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_push="off"
_arg_pull="off"
_arg_d="off"
_arg_rm="off"


print_help()
{
	printf '%s\n' "Use --push to also push the docker images."
	printf 'Usage: %s [--(no-)push] [--(no-)pull] [--(no-)d] [--(no-)rm] [-h|--help]\n' "$0"
	printf '\t%s\n' "--push, --no-push: Push the containers (off by default)"
	printf '\t%s\n' "--pull, --no-pull: Pull upstream images. Might be time-consuming to rebuild everything. (off by default)"
	printf '\t%s\n' "--d, --no-d: Start compose in detached mode (off by default)"
	printf '\t%s\n' "--rm, --no-rm: Remove directories with certs, keys and temporary directories. (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--no-push|--push)
				_arg_push="on"
				test "${1:0:5}" = "--no-" && _arg_push="off"
				;;
			--no-pull|--pull)
				_arg_pull="on"
				test "${1:0:5}" = "--no-" && _arg_pull="off"
				;;
			--no-d|--d)
				_arg_d="on"
				test "${1:0:5}" = "--no-" && _arg_d="off"
				;;
			--no-rm|--rm)
				_arg_rm="on"
				test "${1:0:5}" = "--no-" && _arg_rm="off"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
# ] <-- needed because of Argbash

# load sh libs
. sh_libs/liblog.sh

# exit on error
set -e

echo "███████╗███╗   ██╗ ██████╗ ██████╗ ██████╗ ███████╗██████╗ ███╗   ███╗ █████╗ ██████╗
██╔════╝████╗  ██║██╔════╝██╔═══██╗██╔══██╗██╔════╝██╔══██╗████╗ ████║██╔══██╗██╔══██╗
█████╗  ██╔██╗ ██║██║     ██║   ██║██║  ██║█████╗  ██████╔╝██╔████╔██║███████║██████╔╝
██╔══╝  ██║╚██╗██║██║     ██║   ██║██║  ██║██╔══╝  ██╔══██╗██║╚██╔╝██║██╔══██║██╔═══╝
███████╗██║ ╚████║╚██████╗╚██████╔╝██████╔╝███████╗██║  ██║██║ ╚═╝ ██║██║  ██║██║
╚══════╝╚═╝  ╚═══╝ ╚═════╝ ╚═════╝ ╚═════╝ ╚══════╝╚═╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝╚═╝

██████╗  ██████╗  ██████╗██╗  ██╗███████╗██████╗      ██████╗ ██████╗ ███╗   ███╗██████╗  ██████╗ ███████╗███████╗
██╔══██╗██╔═══██╗██╔════╝██║ ██╔╝██╔════╝██╔══██╗    ██╔════╝██╔═══██╗████╗ ████║██╔══██╗██╔═══██╗██╔════╝██╔════╝
██║  ██║██║   ██║██║     █████╔╝ █████╗  ██████╔╝    ██║     ██║   ██║██╔████╔██║██████╔╝██║   ██║███████╗█████╗
██║  ██║██║   ██║██║     ██╔═██╗ ██╔══╝  ██╔══██╗    ██║     ██║   ██║██║╚██╔╝██║██╔═══╝ ██║   ██║╚════██║██╔══╝
██████╔╝╚██████╔╝╚██████╗██║  ██╗███████╗██║  ██║    ╚██████╗╚██████╔╝██║ ╚═╝ ██║██║     ╚██████╔╝███████║███████╗
╚═════╝  ╚═════╝  ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝     ╚═════╝ ╚═════╝ ╚═╝     ╚═╝╚═╝      ╚═════╝ ╚══════╝╚══════╝
                                                                                                                  "

info "Welcome to EncoderMap's Docker Compose. This file will build a working SLURM cluster using docker compose."
info "We will start with some checks."
error "Remove this line. It deletes all containers."
docker rm -v -f $(docker ps -qa) &> /dev/null || true

if [ $_arg_rm = "on" ] ; then
  info "Deleting certs and keys."
  rm -rf munge/
  rm -rf work/
  rm -rf openldap_data/
  rm -rf certs/
  rm -rf nfs_mount/
fi

# test whether docker compose is available
if ! command -v docker &> /dev/null ; then
  error "Can't run docker. Please set up docker and docker-compose for your machine."
  exit
else
  info "Docker is installed."
fi

# thest the cgroup conf
CGROUPCONF=$( stat -fc %T /sys/fs/cgroup/ )
if [ $CGROUPCONF = "cgroup2fs" ] ; then
  error "System operates in cgroupsv2 mode. This is currently not supported. Only cgroupsv1 is supported. Add 'systemd.unified_cgroup_hierarchy=false' to your kernel parameters and run update-grub to put this machine into cgroupsv1 mode."
  exit
else
  if [ ! -f /sys/fs/cgroup/unified ] ; then
    warn "System operates in cgroupsv1 mode."
  else
    error "System operates in hybrid cgroups mode. This is currently not supported. Only cgroupsv1 is supported. Add 'systemd.unified_cgroup_hierarchy=false' to your kernel parameters and run update-grub to put this machine into cgroupsv1 mode."
    exit
  fi
fi

# test whether munge is available
if ! command -v mungekey &> /dev/null ; then
  error "Can't run mungekey. Please install munge with \`apt install munge libmunge-dev libmunge2\`."
  exit
else
  info "mungekey is installed."
fi

# and create munge key
if [ ! -f munge/munge.key ] ; then
  info "Creating new munge.key."
  mkdir munge
  mungekey -k munge/munge.key
else
  info "munge.key already exists at munge/munge.key."
fi

# copy requirements
info "Copying requirement files"
cp -n ../../requirements.txt .
cp -n ../../md_requirements.txt .
cp -n ../../docs/sphinx_requirements.txt .
cp -n ../../tests/test_requirements.txt .

# set up certs
if [ ! -f certs/ca.crt ] || [ ! -f certs/server.crt ] || [ ! -f certs/server.key ] ; then
  info "Creating certificates."
  mkdir -p certs
  openssl req -x509 -new -nodes -keyout certs/ca.key -sha256 -days 1826 -out certs/ca.crt -subj '/CN=example.org Root CA/C=AT/ST=Germany/L=Konstanz/O=Example' &> /dev/null
  openssl req -new -newkey rsa:2048 -nodes -keyout certs/server.key -out certs/server.csr -subj '/CN=example.org Root CA/C=AT/ST=Germany/L=Konstanz/O=Example' &> /dev/null
  openssl x509 -req -days 2000 -in certs/sever.csr -CA certs/ca.crt -CAkey certs/ca.key -CAcreateserial -out certs/server.crt &> /dev/null
  chmod a+rx certs/*
else
  info "Certificates in certs/ already exist."
fi

# delete old docker container
containers=($( docker container ls -a | awk '{ print $NF }' ))
if [[ ${containers[@]} =~ "openldap" ]] ; then
  info "Old openldap container still running. Cleaning up."
  docker stop openldap &> /dev/null
  docker rm openldap &> /dev/null || true
fi
if [[ ${containers[@]} =~ "phpldapadmin" ]] ; then
  info "Old phpldapadmin container still running. Cleaning up."
  docker stop phpldapadmin &> /dev/null
  docker rm phpldapadmin &> /dev/null || true
fi
if [[ ${containers[@]} =~ "ldapclient" ]] ; then
  info "Old ldapclient container still running. Cleaning up."
  docker stop ldapclient &> /dev/null
  docker rm phpldapadmin &> /dev/null || true
fi

# deleting old networks
networks=($( docker network ls | awk '{ print $2 }' ))
if [[ ${networks[@]} =~ "example" ]] ; then
  info "Old network exists. Cleaning up."
  docker network rm example &> /dev/null
fi

# deleting old volumes
networks=($( docker volume ls | awk '{ print $2 }' ))
if [[ ${networks[@]} =~ "emap-vol" ]] ; then
  info "Old volume exists. Cleaning up."
  docker volume rm emap-vol &> /dev/null
fi

# the base image has gromacs installed
info "Building the base image with Gromacs, Gosu, and environment modules."
if [ $_arg_pull = "on" ] ; then
  info "Also pulling updated upstream images. This might take some time."
  docker build --pull -t kevinsawade/modules-gmx-base:latest -f modules/Dockerfile \
    --build-arg GOSU_VERSION="1.11" \
    --build-arg ENVIRONMENT_MODULES_VERSION="5.2.0" \
    --build-arg GMX_VERSION="2023.1" \
    --build-arg CMAKE_VERSION="3.26.3" . &> /dev/null
else
  docker build -t kevinsawade/modules-gmx-base:latest -f modules/Dockerfile \
    --build-arg GOSU_VERSION="1.11" \
    --build-arg ENVIRONMENT_MODULES_VERSION="5.2.0" \
    --build-arg GMX_VERSION="2023.1" \
    --build-arg CMAKE_VERSION="3.26.3" . &> /dev/null
fi
info "Successfully built the base image. Testing."
docker run -u=1000 -it kevinsawade/modules-gmx-base:latest /bin/bash -l -c /etc/test.sh
if [ $_arg_push = "on" ] ; then
  info "Pushing the base image."
  docker push kevinsawade/modules-gmx-base:latest
fi

# the openLDAP image, which is used to synchronize users across SLURM nodes
info "Building the openLDAP image."
if [ $_arg_pull = "on" ] ; then
  info "Also pulling updated upstream images. This might take some time."
  docker build --pull -t kevinsawade/ldap-client:latest -f ldap_client/Dockerfile . &> /dev/null
else
  docker build -t kevinsawade/ldap-client:latest -f ldap_client/Dockerfile . &> /dev/null
fi
info "Successfully built openLDAP image. Spooling up the OPENLDAP server to test the client."
docker network create example --driver bridge &> /dev/null
docker volume create emap-vol &> /dev/null
docker run \
  --rm \
  --name openldap \
  --mount type=bind,source="$(pwd)"/certs_backup,target=/certs \
  --mount type=bind,source="$(pwd)"/ldap_server/custom.ldif,target=/ldifs/custom.ldif \
  --hostname openldap \
  --detach \
  --dns 1.1.1.1 \
  --network example \
  --network-alias openldap.example.org \
  --env LDAP_PORT_NUMBER=389 \
  --env LDAP_LDAPS_PORT_NUMBER=636 \
  --env LDAP_ADMIN_USERNAME=admin \
  --env LDAP_ADMIN_PASSWORD=adminpassword \
  --env LDAP_ROOT=dc=example,dc=org \
  --env LDAP_ADMIN_DN=cn=admin,dc=example,dc=org \
  --env LDAP_CONFIG_ADMIN_ENABLED=yes \
  --env LDAP_CONFIG_ADMIN_USERNAME=admin \
  --env LDAP_CONFIG_ADMIN_PASSWORD=configpassword \
  --env LDAP_ENABLE_TLS=yes \
  --env LDAP_TLS_CERT_FILE=/certs/server.crt \
  --env LDAP_TLS_KEY_FILE=/certs/server.key \
  --env LDAP_TLS_CA_FILE=/certs/ca.crt \
  --env BITNAMI_DEBUG=false \
  bitnami/openldap:latest &> /dev/null
docker run \
  --rm \
  --name phpldapadmin \
  --hostname phpldapadmin \
  --detach \
  --dns 1.1.1.1 \
  --publish 10443:443 \
  --network example\
  --env PHPLDAPADMIN_LDAP_HOSTS=openldap.example.org \
  osixia/phpldapadmin:0.9.0 &> /dev/null
sleep 3

# check whether phpmyadmin is up
check=$( curl -Is --insecure https://127.0.0.1:10443 )
if [[ $check == *"HTTP/2 200"* ]] ; then
  info "Can curl the PHPLDAPADMIN server under https://127.0.0.1:10443"
else
  error "Can't curl the PHPLDAPADMIN server under https://127.0.0.1:10443"
  exit
fi

# Test the docker network
info "Testing the docker network."
containers=()
while read -r i ; do
  name=$( jq -r .Name <<< $i )
  containers+=( $name )
done < <( docker network inspect example | jq -c .[0].Containers[] )
if [[ ! ${containers[@]} =~ "openldap" ]] ; then
  error "The openldap container is not part of example"
  docker network inspect example
  exit
fi
if [[ ! ${containers[@]} =~ "phpldapadmin" ]] ; then
  error "The phpldapadmin container is not part of example"
  docker network inspect example
  exit
fi
info "Both openldap and phpldapadmin are part of the docker network example."

# check whether I can ssh onto ldap client
docker run -it \
  --rm \
  --network example \
  --detach \
  --dns 1.1.1.1 \
  --name ldapclient \
  --env LDAP_ADMIN_PASSWORD=adminpassword \
  -p 222:22 \
  kevinsawade/ldap-client:latest &> /dev/null
sleep 3

# check ssh
info "Testing ssh connection to LDAP client."
if sshpass -p password1 ssh -p 222 -q user01@localhost exit ; then
  info "Can ssh into client with LDAP user and password."
else
  echo "Can't ssh into client"
  exit
fi
if [ $_arg_push = "on" ] ; then
  info "Pushing the ldap-client image."
  docker push kevinsawade/ldap-client:latest
fi

info "Stopping LDAP servers and continue to build images. Next is SLURM."
docker stop openldap &> /dev/null
docker rm openldap &> /dev/null || true
docker stop phpldapadmin &> /dev/null
docker rm phpldapadmin &> /dev/null || true
docker stop ldapclient &> /dev/null
docker rm ldapclient &> /dev/null || true


# Build Slurm base
info "Building the SLURM base image."
if [ $_arg_pull = "on" ] ; then
  info "Also pulling updated upstream images. This might take some time."
  docker build --pull -t kevinsawade/slurm-base:latest -f slurm_base/Dockerfile . &> /dev/null
else
  docker build -t kevinsawade/slurm-base:latest -f slurm_base/Dockerfile . &> /dev/null
fi
if [ $_arg_push = "on" ] ; then
  info "Pushing the slurm-base image."
  docker push kevinsawade/slurm-base:latest
fi

# Build Slurm db
info "Building the SLURM database image."
if [ $_arg_pull = "on" ] ; then
  info "Also pulling updated upstream images. This might take some time."
  docker build --pull -t kevinsawade/slurm-db:latest -f slurm_db/Dockerfile . &> /dev/null
else
  docker build -t kevinsawade/slurm-db:latest -f slurm_db/Dockerfile . &> /dev/null
fi
if [ $_arg_push = "on" ] ; then
  info "Pushing the slurm-db image."
  docker push kevinsawade/slurm-db:latest
fi

# Test Slurm db with mariadb
info "Testing SLURM database. For that, I will spool up an LDAP and a MariaDB server."
docker run \
  --rm \
  --name openldap \
  --mount type=bind,source="$(pwd)"/certs_backup,target=/certs \
  --mount type=bind,source="$(pwd)"/ldap_server/custom.ldif,target=/ldifs/custom.ldif \
  --hostname openldap \
  --detach \
  --dns 1.1.1.1 \
  --network example \
  --network-alias openldap.example.org \
  --env LDAP_PORT_NUMBER=389 \
  --env LDAP_LDAPS_PORT_NUMBER=636 \
  --env LDAP_ADMIN_USERNAME=admin \
  --env LDAP_ADMIN_PASSWORD=adminpassword \
  --env LDAP_ROOT=dc=example,dc=org \
  --env LDAP_ADMIN_DN=cn=admin,dc=example,dc=org \
  --env LDAP_CONFIG_ADMIN_ENABLED=yes \
  --env LDAP_CONFIG_ADMIN_USERNAME=admin \
  --env LDAP_CONFIG_ADMIN_PASSWORD=configpassword \
  --env LDAP_ENABLE_TLS=yes \
  --env LDAP_TLS_CERT_FILE=/certs/server.crt \
  --env LDAP_TLS_KEY_FILE=/certs/server.key \
  --env LDAP_TLS_CA_FILE=/certs/ca.crt \
  --env BITNAMI_DEBUG=false \
  bitnami/openldap:latest &> /dev/null
docker run \
  --rm \
  --detach \
  --name mysql \
  --network-alias db.example.org \
  --network example \
  --publish 3306:3306 \
  --env MYSQL_ROOT_PASSWORD=sql_root_passw0rd \
  --env MYSQL_PASSWORD=sql_passw0rd \
  --env MYSQL_USER=mysql_user \
  --env MYSQL_DATABASE=mysql_db \
  mariadb:latest --innodb-buffer-pool-size=1024M --innodb-log-file-size=64M --innodb-lock-wait-timeout=900 &> /dev/null
sleep 2
docker run \
  --rm \
  --detach \
  --name phpmyadmin \
  --network-alias db-gui.example.org \
  --network example \
  --publish 8080:80 \
  --env PMA_HOST=mysql \
  phpmyadmin:latest &> /dev/null
docker run \
  --rm \
  --detach \
  --env LDAP_ADMIN_PASSWORD=adminpassword \
  --name slurm-database \
  --hostname slurm-database \
  --network-alias slurm-database.example.org \
  --network example \
  kevinsawade/slurm-db:latest &> /dev/null
sleep 5
info "Querying the slurm_acct_db database."
mapfile -t arr < <(mysql -h 127.0.0.1 -u root -psql_root_passw0rd -e "SHOW DATABASES;")
if [[ ${arr[@]} =~ "slurm_acct_db" ]] ; then
  info "The slurm_acct_db database has been created on the mariaDB server."
else
  error "The slurm_acct_db database has not been created on the mariaDB server."
  error ${arr[@]}
  exit
fi

mapfile -t arr < <(mysql -h 127.0.0.1 -u root -psql_root_passw0rd -e "USE slurm_acct_db; SHOW TABLES;")
if [[ ${arr[@]} =~ "cluster_table" ]] ; then
  info "The cluster_table table has been created on the slurm_acct_db database."
else
  error "The cluster_table table has not been created on the slurm_acct_db database."
  error ${arr[@]}
  exit
fi

# Do the same for the slurm master
info "Building the slurm-master."
if [ $_arg_pull = "on" ] ; then
  info "Also pulling updated upstream images. This might take some time."
  docker build --pull -t kevinsawade/slurm-master:latest -f slurm_master/Dockerfile . &> /dev/null
else
  docker build -t kevinsawade/slurm-master:latest -f slurm_master/Dockerfile . &> /dev/null
fi
if [ $_arg_push = "on" ] ; then
  info "Pushing the slurm-master image."
  docker push kevinsawade/slurm-master:latest
fi

info "Starting the master."
docker run \
  --rm \
  --detach \
  --env LDAP_ADMIN_PASSWORD=adminpassword \
  --name slurm-master \
  --hostname slurm-master \
  --network-alias slurm-master.example.org \
  --network example \
  kevinsawade/slurm-master:latest &> /dev/null

info "Building the slurm-node."
mkdir -p encodermap_dist
mkdir -p encodermap_dist/tests
cp -n ../../setup.py encodermap_dist
cp -n ../../description.md encodermap_dist
cp -n ../../versioneer.py encodermap_dist
cp -n ../../pyproject.toml encodermap_dist
cp -rn ../../encodermap encodermap_dist
cp ../../tests/test_featurizer.py encodermap_dist/tests
if [ $_arg_pull = "on" ] ; then
  info "Also pulling updated upstream images. This might take some time."
  docker build --pull -t kevinsawade/slurm-node:latest -f slurm_node/Dockerfile .
else
  docker build -t kevinsawade/slurm-node:latest -f slurm_node/Dockerfile .
fi

if [ $_arg_push = "on" ] ; then
  info "Pushing the slurm-node image."
  docker push kevinsawade/slurm-node:latest
fi
info "Running tests in node."
# Maybe this can help when debugging cgroups
#   --cgroupns private \
#  --privileged \
#  --cap-add SYS_ADMIN \
#  --security-opt seccomp=unconfined \
#  --cgroup-parent=docker.slice \
#  --tmpfs /tmp \
#  --tmpfs /run \
#  --tmpfs /run/lock \
docker run \
  --rm \
  --env LDAP_ADMIN_PASSWORD=adminpassword \
  --name c1 \
  --hostname c1 \
  --network-alias c1.example.org \
  --network example \
  --mount source=emap-vol,target=/work \
  kevinsawade/slurm-node:latest /test_slurm_node.sh

info "Adding prometheus to the slurm-node."
if [ $_arg_pull = "on" ] ; then
  info "Also pulling updated upstream images. This might take some time."
  docker build --pull -t kevinsawade/slurm-node-w-prometheus:latest -f slurm_node_w_prometheus/Dockerfile . &> /dev/null
else
  docker build -t kevinsawade/slurm-node-w-prometheus:latest -f slurm_node_w_prometheus/Dockerfile . &> /dev/null
fi
if [ $_arg_push = "on" ] ; then
  info "Pushing the slurm-node-w-prometheus client image."
  docker push kevinsawade/slurm-node:latest
fi
docker run \
  --rm \
  --detach \
  --env LDAP_ADMIN_PASSWORD=adminpassword \
  --name c1 \
  --hostname c1 \
  --network-alias c1.example.org \
  --network example \
  --mount source=emap-vol,target=/work \
  kevinsawade/slurm-node-w-prometheus:latest &> /dev/null

info "Starting Prometheus and Grafana servers."
docker run \
  --rm \
  --detach \
  --name prometheus \
  --network example \
  --publish 9090:9090 \
  --volume ./slurm_node_w_prometheus/prometheus:/etc/prometheus \
  prom/prometheus:latest &> /dev/null

info "Running tests in SLURM."
docker run \
  --rm \
  --env LDAP_ADMIN_PASSWORD=adminpassword \
  --name c2 \
  --hostname c2 \
  --network-alias c2.example.org \
  --network example \
  --mount source=emap-vol,target=/work \
  kevinsawade/slurm-node:latest /run_dask_tests_on_slurm.sh

info "Stopping and deleting test containers. Getting ready for docker compose."
docker stop openldap &> /dev/null
docker rm openldap &> /dev/null || true
docker stop phpmyadmin &> /dev/null
docker rm phpmyadmin &> /dev/null || true
docker stop slurm-database &> /dev/null
docker rm slurm-database &> /dev/null || true
docker stop slurm-master &> /dev/null
docker rm slurm-master &> /dev/null || true
docker stop c1 &> /dev/null
docker rm c1 &> /dev/null || true
docker stop c2 &> /dev/null
docker rm c2 &> /dev/null || true
docker stop mysql &> /dev/null
docker rm mysql &> /dev/null || true

exit
if [ $_arg_d = "on" ] ; then
  docker compose up -d
else
  docker compose up
fi


error "Good error. Script ran through."
