# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

################################################################################
# Path
################################################################################

# Standard Library Imports
import sys

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
from pathlib import Path


sys.path.insert(0, str(Path(__file__).resolve().parent.parent.parent))


# Encodermap imports
import encodermap as em


################################################################################
# Project Info
################################################################################


project = "encodermap"
copyright = "2024, Kevin Sawade, Tobias Lemke, University of Konstanz"
author = "Kevin Sawade, Tobias Lemke"

# The full version, including alpha/beta/rc tags
version = em.__version__
release = em.__version__


################################################################################
# General
################################################################################

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.intersphinx",
    "myst_parser",
    "sphinx.ext.napoleon",
    "sphinx.ext.todo",
    "sphinx.ext.coverage",
    "sphinx.ext.githubpages",
    "sphinxcontrib.youtube",
    "sphinx.ext.mathjax",
    "sphinx_copybutton",
    "sphinxcontrib.bibtex",
    "sphinx_design",
    "sphinx_click",
    "nbsphinx",
    "sphinx_gallery.load_style",  # needed by nbsphinx
    "sphinx.ext.viewcode",
]

# Napoleon settings
napoleon_google_docstring = True
napoleon_numpy_docstring = False

# intersphinx settings
intersphinx_mapping = {
    "python": ("https://docs.python.org/3", None),
    "numpy": ("http://docs.scipy.org/doc/numpy", None),
    "xarray": ("http://xarray.pydata.org/en/stable/", None),
    "pandas": ("http://pandas.pydata.org/pandas-docs/dev", None),
}

# bibtex settings
bibtex_bibfiles = ["refs.bib"]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
source_suffix = [".rst", ".md"]

# The master toctree document.
master_doc = "index"

# Settings for nbsphinx and nbsphinx_link
nbsphinx_execute = "never"
nbsphinx_timeout = 180
nbsphinx_allow_errors = True

# Datetime settings
html_last_updated_fmt = "%Y-%m-%dT%H:%M:%S"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
html_extra_path = [
    "_static/robots.txt",
    "_static/test_badge.json",
    "_static/docbuild_badge.json",
    "_static/coverage_badge.json",
]
exclude_patterns = [
    ".build",
    "Thumbs.db",
    ".DS_Store",
    "setup.rst",
    "**.ipynb_checkpoints",
]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# Setting for copybutton
copybutton_prompt_text = r">>> |\.\.\. |\$ |In \[\d*\]: | {2,5}\.\.\.: | {5,8}: "
copybutton_prompt_is_regexp = True


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "pydata_sphinx_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {
    "github_url": "https://github.com/Ag-Peter/encodermap",
    "navbar_start": ["navbar-logo"],
    "navbar_center": ["navbar-nav"],
    "navbar_end": ["theme-switcher", "navbar-icon-links"],
    "footer_start": ["copyright", "sphinx-version"],
    "footer_center": ["last-updated"],
    "footer_end": ["version"],
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]
html_css_files = ["custom.css"]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#

html_sidebars = {"index": []}


html_logo = "../../pic/logo_cube_300.png"
html_favicon = "../../pic/favicon.ico"

# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "encodermapdoc"


# -- Extension configuration -------------------------------------------------

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# autodoc settings
autodoc_default_options = {"members": True}
autodoc_typehints = "description"
add_module_names = False
toc_object_entries_show_parents = "hide"
add_function_parentheses = False


def autodoc_skip_member_handler(app, what, name, obj, skip, options):
    # Standard Library Imports
    import re

    exclude = re.findall("\._.*", str(obj))
    return skip or exclude


def autodoc_skip_module_level_docstring_handler(app, what, name, obj, options, lines):
    if "synopsis" in options and what == "module":
        lines.clear()


# Automatically called by sphinx at startup
def setup(app):
    # Connect the autodoc-skip-member event from apidoc to the callback
    app.connect("autodoc-skip-member", autodoc_skip_member_handler)
    app.connect(
        "autodoc-process-docstring", autodoc_skip_module_level_docstring_handler
    )
